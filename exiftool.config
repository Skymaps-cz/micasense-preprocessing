%Image::ExifTool::UserDefined = (
    'Image::ExifTool::XMP::Main' => {
        Camera => { 
            SubDirectory => {
                TagTable => 'Image::ExifTool::UserDefined::Camera',
            },
        },
        Micasense => { # Adding the new group here
            SubDirectory => {
                TagTable => 'Image::ExifTool::UserDefined::Micasense',
            },
        },
    },
); 

%Image::ExifTool::UserDefined::Camera = (
    GROUPS => { 0 => 'XMP', 1 => 'XMP-Camera', 2 => 'Camera' },
    NAMESPACE => { 'Camera' => 'http://pix4d.com/camera/1.0/'  },
    WRITABLE => 'string',
    Yaw             => { Writable => 'real' },
    Pitch           => { Writable => 'real' },
    Roll            => { Writable => 'real' },
    IMUSampleSize   => { Writable => 'integer' },
    IMUTimeOffset   => { Writable => 'integer' },
    LineReadoutTime => { Writable => 'integer' },
    IMUFrequency    => { Writable => 'real' },
    PrincipalPoint  => { },
    ModelType       => { },
    PerspectiveFocalLength => { Writable => 'real' },
    PerspectiveDistortion  => { },
    IMULinearVelocity => { },
    GPSXYAccuracy   => { Writable => 'real' },
    GPSZAccuracy    => { Writable => 'real' },
    FlightUUID      => { },
    CentralWaveLength => { },
    BandName        => { },
    RigName         => { },
    RigCameraIndex  => { },
    BandName        => { List => 'Seq' },
    IMUAngularVelocity => {
        Binary => 1,
        ValueConv => 'Image::ExifTool::XMP::DecodeBase64($val)',
        ValueConvInv => 'Image::ExifTool::XMP::EncodeBase64($val)',
    },
    ResourceForkSize           => { Writable => 'integer' },
    SubfileType                => { },
    StripOffsets               => { },
    RowsPerStrip               => { Writable => 'integer' },
    StripByteCounts            => { },
    XMPToolkit                 => { },
    About                      => { },
    WavelengthFWHM             => { Writable => 'real' },
    PerspectiveFocalLengthUnits=> { },
    VignettingCenter           => { },
    VignettingPolynomial       => { },
    BandSensitivity            => { Writable => 'real' },
    RigRelatives               => { },
    RigRelativesReferenceRigCameraIndex => { Writable => 'integer' },
    Irradiance                 => { Writable => 'real' },
    IrradianceYaw              => { Writable => 'real' },
    IrradiancePitch            => { Writable => 'real' },
    IrradianceRoll             => { Writable => 'real' },
    Serial                     => { },
    SwVersion                  => { },
    TimeStamp                  => { Writable => 'integer' },
    SpectralIrradiance         => { Writable => 'real' },
    HorizontalIrradiance       => { Writable => 'real' },
    DirectIrradiance           => { Writable => 'real' },
    ScatteredIrradiance        => { Writable => 'real' },
    SolarElevation             => { Writable => 'real' },
    SolarAzimuth               => { Writable => 'real' },
    EstimatedDirectLightVector => { },
    ISO                        => { Writable => 'integer' },
    MeteringMode               => { },
    SubSecTime                 => { },
    FocalPlaneXResolution      => { Writable => 'real' },
    FocalPlaneYResolution      => { Writable => 'real' },
    FocalPlaneResolutionUnit   => { },
    SerialNumber               => { },
    GPSVersionID               => { },
    GPSLatitudeRef             => { },
    GPSLongitudeRef            => { },
    GPSAltitudeRef             => { },
    GPSDilutionOfPrecision     => { Writable => 'real' },
    BlackLevelRepeatDim        => { },
    BlackLevel                 => { },
    OpcodeList3                => { },
);

%Image::ExifTool::UserDefined::Micasense = (
    GROUPS => { 0 => 'XMP', 1 => 'XMP-Micasense', 2 => 'Micasense' },
    NAMESPACE => { 'Micasense' => 'http://micasense.com/MicaSense/1.0/'  },
    WRITABLE => 'string',
    RadiometricCalibration     => { },
    BootTimestamp              => { Writable => 'integer' },
    ImagerTemperatureC         => { Writable => 'real' },
    FlightId                   => { },
    CaptureId                  => { },
    TriggerMethod              => { Writable => 'integer' },
    PressureAlt                => { Writable => 'real' },
    DarkRowValue               => { },
);